package com.cdk.ea.tools.data.generation.core;

import com.cdk.ea.tools.data.generation.common.CMDLineArgHelper;
import com.cdk.ea.tools.data.generation.common.Identifier;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * Container for the Identifiers supported by data-generator for generating random data.
 * Each Identifier is identified by its character identifier. The identifiers need not be
 * unique and can be reused.
 * @author Sarvesh Dubey <sarvesh.dubey@cdk.com>
 * @since 07-02-2017
 * @version 1.0
 */
@AllArgsConstructor
public enum Identifiers implements Identifier<Character>, CMDLineArgHelper {

    /**
     * Identifier for identifying {@link DataType}. Must be immediately followed
     * by single valid {@link DataType}
     * @see DataType
     */
    TYPE(':', "Type Identifier"),
    
    /**
     * Identifier for identifying {@link Properties}. Must be immediately followed
     * by single valid {@link Properties}
     * @see Properties
     */
    PROPERTY('-', "Property Identifier"),
    
    /**
     * Identifier for identifying length of data generated as determined by
     * String.length() of data generated. To be followed by length.
     * If not specified, will default to {@link Defaults#DEFAULT_LENGTH}
     */
    LENGTH('l', "Data Length Identifier"),
    
    /**
     * Identifier for identifying quantity of data to be generated. Must be 
     * immediately followed by quantity.
     * If not specified, will default to {@link Defaults#DEFAULT_QUANTITY} 
     */
    QUANTITY('=', "Quantity Identifier"),
    
    /**
     * Identifier for distinguishing between multiple queries, either
     * data generation query or data export query. 
     */
    QUERY_SEPARATOR('|', "Query Separator"),
    
    /**
     * Identifier for identifying the name of data collector which
     * will hold the data generated by single data generation query.
     * Must be immediately followed by name data collector.
     * If not specified, will default to {@link Defaults#DEFAULT_DATA_COLLECTOR_NAME}
     */
    DATA_COLLECTOR_PREFIX('@', "Data Collector Name Prefix"),
    
    /**
     * Prefix for encapsulating one or more data generation
     * queries.
     */
    DATA_GEN_QUERY_PREFIX('(', "Data Generation Query Start"),
    
    /**
     * Suffix for encapsulating one or more data generation
     * queries.
     */
    DATA_GEN_QUERY_SUFFIX(')', "Data Generation Query End"),
    
    /**
     * Should the data generated be exported to CSV file.
     * If this identifier is present in query, data will
     * be exported.
     */
    FILE('f', "Export to CSV file"),
    
    /**
     * Prefix for encapsulating one or more data export
     * queries.
     */
    DATA_EXPORT_QUERY_PREFIX('<', "Data Export Query Start"),
    
    /**
     * Suffix for encapsulating one or more data export
     * queries.
     */
    DATA_EXPORT_QUERY_SUFFIX('>', "Data Export Query End"),
    
    /**
     * Identifier to identify single header name for CSV file.
     * Must be immediately followed by header name. 
     */
    CSV_HEADER_PREFIX('_', "CSV Header prefix"),
    
    /**
     * Identifier to identify are there any defaults that need
     * to be overriden.
     */
    OVERRIDE('o', "Default Override Identifier"),
    
    /**
     * Identifier to identify single data collector name 
     * whose data will be populated in CSV column.
     * Must be immediately followed by data collector name. 
     */
    CSV_COL_DATA_REF('=', "CSV Column Data Reference Identifier"),
    
    /**
     * Prefix identifier for String type. Must be immediately
     * followed by prefix.
     */
    PREFIX('P', "String Prefix Identifier"),
    
    /**
     * Suffix identifier for String type. Must be immediately
     * followed by suffix.
     */
    SUFFIX('S', "String Suffix Identifier");

    @Getter
    private final Character identifier;

    @Getter
    private final String help;

}
