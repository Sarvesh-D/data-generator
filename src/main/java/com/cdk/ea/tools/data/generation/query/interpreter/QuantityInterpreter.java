package com.cdk.ea.tools.data.generation.query.interpreter;

import java.util.Arrays;
import java.util.Optional;

import com.cdk.ea.tools.data.generation.core.Defaults;
import com.cdk.ea.tools.data.generation.core.Identifiers;
import com.cdk.ea.tools.data.generation.query.Query;
import com.cdk.ea.tools.data.generation.query.Query.QueryBuilder;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

/**
 * Interpreter to interpret the quantity of data to be generated by a single
 * dataGeneration {@link Query}
 * 
 * @author Sarvesh Dubey <sarvesh.dubey@cdk.com>
 * @since 10-02-2017
 * @version 1.0
 */
@Slf4j
@NoArgsConstructor(access = AccessLevel.PACKAGE)
class QuantityInterpreter implements Interpreter {

    @NonNull
    @Setter
    private static Integer defaultQuantity = Defaults.DEFAULT_QUANTITY;

    /**
     * {@inheritDoc}. This method looks up for quantity of the data to be
     * generated. If quantity is specified it is taken, else default quantity of
     * {@link Defaults#DEFAULT_QUANTITY} is taken. This method will override the
     * data quantity set by {@link GlobalDefaultOverrideInterpreter}
     */
    @Override
    public void doInterpret(QueryBuilder queryBuilder, String... identifiers) {
	try {
	    // allow local quantity to override the default quantity
	    Optional<Integer> quantity = Arrays.stream(identifiers)
		    .filter(i -> i.charAt(0) == Identifiers.QUANTITY.getIdentifier())
		    .map(i -> Integer.valueOf(i.substring(1))).findFirst();
	    if (quantity.isPresent())
		queryBuilder.setQuantity(quantity.get());
	    else {
		log.debug("Quantity not specified. Default quantity of {} shall be used", defaultQuantity);
		queryBuilder.setQuantity(defaultQuantity);
	    }
	} catch (Exception e) {
	    log.warn("Error occured while interpreting quantity : {}. Default quantity of {} shall be used",
		    e.getMessage(), defaultQuantity);
	    queryBuilder.setQuantity(defaultQuantity);
	}
    }

}
