/**
 *
 */
package com.ds.tools.data.generator.client;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.ds.tools.data.generator.core.Defaults;

/**
 *
 * @author <a href="https://github.com/Sarvesh-D/">Sarvesh Dubey</a>
 * @since 23 Jun 2018
 * @version 1.0
 */
@RunWith(JUnit4.class)
public class StringsTest {

    @Test
    public void test45AlphaStringsHavingLength5() {
        final List<String> strings = new Strings().alpha()
                                                  .havingLength(5)
                                                  .quantity(45)
                                                  .generate()
                                                  .collect(Collectors.toList());

        assertEquals("Exactly 45 Strings should be generated", 45, strings.size());
        assertTrue("All Strings should be only alpha string", strings.stream()
                                                                     .filter(StringUtils::isAlpha)
                                                                     .count() == 45);
        assertTrue("All Strings should have length 5", strings.stream()
                                                              .filter(s -> s.length() == 5)
                                                              .count() == 45);
    }

    @Test
    public void testStringsWithSuffixAndPrefix() {
        final List<String> strings = new Strings().alpha()
                                                  .startingWith("hi")
                                                  .endingWith("bye")
                                                  .generate()
                                                  .collect(Collectors.toList());
        assertTrue("No string generated", strings.size() > 0);

        assertTrue("All Strings should start with hi", strings.stream()
                                                              .filter(s -> s.startsWith("hi"))
                                                              .count() == strings.size());

        assertTrue("All Strings should end with bye", strings.stream()
                                                             .filter(s -> s.endsWith("bye"))
                                                             .count() == strings.size());
    }

    @Test
    public void testNumericStrings() {
        final List<String> strings = new Strings().numeric()
                                                  .generate()
                                                  .collect(Collectors.toList());
        assertTrue("No string generated", strings.size() > 0);
        assertTrue("All Strings should be only numeric string", strings.stream()
                                                                       .filter(StringUtils::isNumeric)
                                                                       .count() == strings.size());
    }

    @Test
    public void testSpecialCharStrings() {
        final List<String> strings = new Strings().specialChars()
                                                  .generate()
                                                  .collect(Collectors.toList());
        assertTrue("No string generated", strings.size() > 0);
    }

    @Test
    public void testAlphaNumericStrings() {
        final List<String> strings = new Strings().alpha()
                                                  .numeric()
                                                  .generate()
                                                  .collect(Collectors.toList());
        assertTrue("No string generated", strings.size() > 0);
        assertTrue("All Strings should be alpha numeric string", strings.stream()
                                                                        .filter(StringUtils::isAlphanumeric)
                                                                        .count() == strings.size());
    }

    @Test
    public void testDefaultStrings() {
        final List<String> strings = new Strings().generate()
                                                  .collect(Collectors.toList());
        assertTrue("No string generated", strings.size() > 0);
        assertTrue(Defaults.DEFAULT_QUANTITY + " Strings should be generated by default", strings.size() == Defaults.DEFAULT_QUANTITY);
        assertTrue("All Strings should have length " + Defaults.DEFAULT_LENGTH + " by default", strings.stream()
                                                                                                       .filter(s -> s.length() == Defaults.DEFAULT_LENGTH)
                                                                                                       .count() == strings.size());
        assertTrue("All Strings should be only alpha string by default", strings.stream()
                                                                                .filter(StringUtils::isAlpha)
                                                                                .count() == strings.size());
    }

}
